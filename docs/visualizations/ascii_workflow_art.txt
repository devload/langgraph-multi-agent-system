================================================================================
                    LangGraph 멀티 에이전트 시스템 - ASCII 시각화
================================================================================

1. CODE REVIEW WORKFLOW (실제 테스트 완료)
================================================================================

    ┌─────────────┐         ┌─────────────────┐         ┌──────────────────┐
    │   START     │         │     CLAUDE      │         │     GEMINI       │
    │      ●      │ ------> │   🔍 Analyze    │ ------> │   🚀 Enhance     │
    └─────────────┘         └─────────────────┘         └──────────────────┘
                                     │                            │
                                     ▼                            ▼
                            ┌─────────────────┐         ┌──────────────────┐
                            │ Issues Found:   │         │ Solutions:       │
                            │ • SQL Injection │         │ • Parameterized  │
                            │ • O(n²) Loop    │         │ • Dict O(n)      │
                            │ • No Type Hints │         │ • Add Types      │
                            └─────────────────┘         └──────────────────┘
                                                                 │
                                                                 ▼
                                                        ┌──────────────────┐
                                                        │ 📄 REPORT GEN    │
                                                        │   ✓ Complete     │
                                                        └──────────────────┘
                                                                 │
                                                                 ▼
                                                        ┌──────────────────┐
                                                        │      END         │
                                                        │       ●          │
                                                        └──────────────────┘


2. MISSION EXECUTION FLOW (demo123)
================================================================================

┌─────────────────────────────────────────────────────────────────────────────┐
│                          Mission Timeline                                    │
├─────────────────────────────────────────────────────────────────────────────┤
│                                                                             │
│  Client            Hub              Claude            Gemini                │
│    │               │                 │                 │                    │
│    ├─[REGISTER]──> │                 │                 │                    │
│    │               │                 │                 │                    │
│    │ <──[ID:123]── │                 │                 │                    │
│    │               │                 │                 │                    │
│    ├──[RUN]─────> │                 │                 │                    │
│    │               ├──[EXECUTE]───> │                 │                    │
│    │               │                 │                 │                    │
│    │               │              [ANALYZE]            │                    │
│    │               │                 │                 │                    │
│    │               │                 ├─> • Failed logins detected          │
│    │               │                 ├─> • DB connection lost             │
│    │               │                 └─> • Memory at 95%                  │
│    │               │                 │                 │                    │
│    │               │ <─[3 ISSUES]── │                 │                    │
│    │               │                 │                 │                    │
│    │               ├──[ENHANCE]────────────────────> │                    │
│    │               │                 │                 │                    │
│    │               │                 │              [IMPROVE]              │
│    │               │                 │                 │                    │
│    │               │                 │                 ├─> • Rate limiting │
│    │               │                 │                 ├─> • DB failover   │
│    │               │                 │                 └─> • GC tuning     │
│    │               │                 │                 │                    │
│    │               │ <─[SOLUTIONS]─────────────────── │                    │
│    │               │                 │                 │                    │
│    │ <─[COMPLETE]─ │                 │                 │                    │
│    │               │                 │                 │                    │
└────┴───────────────┴─────────────────┴─────────────────┴──────────────────┘


3. WORKFLOW PATTERNS (테스트 완료)
================================================================================

A) SEQUENTIAL PATTERN (실제 사용)
   ─────────────────────────────
   
   ╔═══════╗    ╔═════════╗    ╔═════════╗    ╔═══════╗
   ║ START ║───>║ CLAUDE  ║───>║ GEMINI  ║───>║  END  ║
   ╚═══════╝    ╚═════════╝    ╚═════════╝    ╚═══════╝
                     │              │
                  분석하기       개선하기
   

B) SINGLE AGENT PATTERN
   ────────────────────
   
   ╔═══════╗    ╔═════════╗    ╔═══════╗
   ║ START ║───>║ CLAUDE  ║───>║  END  ║
   ╚═══════╝    ╚═════════╝    ╚═══════╝
                     │
                빠른 분석


C) CONDITIONAL ROUTING (구현됨)
   ─────────────────────────────
   
                    ┌─────[HIGH]────> ╔═════════╗ ──┐
                    │                 ║ URGENT  ║   │
   ╔═══════╗    ╔═══╧════╗           ╚═════════╝   │    ╔═══════╗
   ║ START ║───>║ CHECK  ║                          ├───>║  END  ║
   ╚═══════╝    ╚═══╤════╝           ╔═════════╗   │    ╚═══════╝
                    │                 ║ NORMAL  ║   │
                    └─────[LOW]─────> ╚═════════╝ ──┘


4. STATE DIAGRAM (시스템 상태 변화)
================================================================================

    ╭─────────╮      ╭──────────────╮      ╭─────────────╮      ╭────────────╮
    │  IDLE   │      │  REGISTERED  │      │   RUNNING   │      │ COMPLETED  │
    │    ◯    │ ───> │      ◐       │ ───> │      ●      │ ───> │     ✓      │
    ╰─────────╯      ╰──────────────╯      ╰─────────────╯      ╰────────────╯
         │                  │                      │                     │
         │                  │                      ▼                     │
         │                  │              ┌──────────────┐             │
         │                  │              │ Claude: 3개  │             │
         │                  │              │ 이슈 발견    │             │
         │                  │              └──────┬───────┘             │
         │                  │                      ▼                     │
         │                  │              ┌──────────────┐             │
         │                  │              │ Gemini: 해결 │             │
         │                  │              │ 방안 생성    │             │
         │                  │              └──────────────┘             │
         │                  │                                           │
         └──────────────────┴───────────────────────────────────────────┘


5. DATA FLOW DIAGRAM (데이터 흐름)
================================================================================

 ╔═══════════════╗        ╔══════════════════╗        ╔═══════════════════╗
 ║  INPUT DATA   ║        ║   PROCESSING     ║        ║   OUTPUT DATA     ║
 ╠═══════════════╣        ╠══════════════════╣        ╠═══════════════════╣
 ║               ║        ║                  ║        ║                   ║
 ║ • Source Code ║───────>║ • Claude 분석    ║───────>║ • Issues List     ║
 ║ • Log Files   ║        ║   - 보안 검사    ║        ║   - SQL Injection ║
 ║ • Config      ║        ║   - 성능 분석    ║        ║   - O(n²) Loop    ║
 ║               ║        ║   - 코드 품질    ║        ║   - Type Missing  ║
 ║               ║        ║                  ║        ║                   ║
 ╚═══════════════╝        ║        ▼         ║        ╚═══════════════════╝
                          ║                  ║                 │
                          ║ • Gemini 개선    ║                 ▼
                          ║   - 해결책 생성  ║        ╔═══════════════════╗
                          ║   - 코드 예시    ║        ║   SOLUTIONS       ║
                          ║   - 우선순위     ║        ╠═══════════════════╣
                          ║                  ║        ║ • Safe Query      ║
                          ╚══════════════════╝        ║ • O(n) Algorithm  ║
                                   │                  ║ • Type Hints      ║
                                   ▼                  ╚═══════════════════╝
                          ╔══════════════════╗                 │
                          ║  REPORT BUILDER  ║                 ▼
                          ╠══════════════════╣        ╔═══════════════════╗
                          ║ • Markdown 생성  ║        ║   FINAL REPORT    ║
                          ║ • 요약 작성      ║───────>║   (.md file)      ║
                          ║ • 액션 플랜      ║        ╚═══════════════════╝
                          ╚══════════════════╝


6. ISSUE DETECTION & RESOLUTION
================================================================================

    ┌──────────────────────────────────────┐
    │         CLAUDE ANALYSIS              │
    ├──────────────────────────────────────┤
    │                                      │
    │  🔴 CRITICAL                         │
    │  └─> SQL Injection @ Line 45        │
    │      query = f"SELECT...{user_id}"  │
    │                                      │
    │  🟡 MEDIUM                           │
    │  └─> O(n²) Performance              │
    │      Nested loops detected          │
    │                                      │
    │  🟢 LOW                              │
    │  └─> Missing Type Hints             │
    │      No type annotations            │
    └──────────────────────────────────────┘
                      │
                      ▼
    ┌──────────────────────────────────────┐
    │         GEMINI SOLUTIONS             │
    ├──────────────────────────────────────┤
    │                                      │
    │  🔴 FIX: Parameterized Query        │
    │  query = "SELECT...WHERE id = %s"   │
    │  cursor.execute(query, (user_id,))  │
    │                                      │
    │  🟡 FIX: Dictionary Lookup          │
    │  lookup = {item.id: item for ...}   │
    │  if id in lookup: process(...)      │
    │                                      │
    │  🟢 FIX: Add Type Annotations       │
    │  def get_user(id: int) -> User:     │
    └──────────────────────────────────────┘


7. MISSION REPORT STRUCTURE
================================================================================

┌─────────────────────────────────────────────────────────────────┐
│                      MISSION REPORT                             │
├─────────────────────────────────────────────────────────────────┤
│                                                                 │
│  ╔═══════════════════════════════════════════════════════╗     │
│  ║  Mission ID: demo123                                  ║     │
│  ║  Date: 2025-07-24 04:57                              ║     │
│  ╚═══════════════════════════════════════════════════════╝     │
│                                                                 │
│  ┌─────────────────┐  ┌──────────────────┐                   │
│  │ Workflow Status │  │ • Claude    ✓    │                   │
│  │   COMPLETED     │  │ • Gemini    ✓    │                   │
│  └─────────────────┘  └──────────────────┘                   │
│                                                                 │
│  ┌──────────────────────────────────────────────┐             │
│  │ Issues Summary                               │             │
│  ├──────────────────────────────────────────────┤             │
│  │ 🔴 Critical: 1  (Security)                   │             │
│  │ 🟡 Medium:   1  (Performance)                │             │
│  │ 🟢 Low:      1  (Maintainability)            │             │
│  └──────────────────────────────────────────────┘             │
│                                                                 │
│  ┌──────────────────────────────────────────────┐             │
│  │ Action Items                                 │             │
│  ├──────────────────────────────────────────────┤             │
│  │ TODAY:      Fix SQL injection               │             │
│  │ THIS WEEK:  Optimize performance            │             │
│  │ THIS MONTH: Add type hints                  │             │
│  └──────────────────────────────────────────────┘             │
│                                                                 │
└─────────────────────────────────────────────────────────────────┘


================================================================================
                        테스트 완료 요약
================================================================================

✅ 실행 완료:
   • Code Review Workflow - 3개 이슈 발견 및 해결
   • Mission API Flow - demo123 성공
   • State Management - 모든 상태 전환 확인
   • Report Generation - Markdown 보고서 생성

📊 결과:
   • SQL Injection → Parameterized Query
   • O(n²) Loop → O(n) Dictionary
   • No Types → Type Annotations Added

🎯 시스템 준비 완료!